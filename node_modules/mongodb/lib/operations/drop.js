<<<<<<< HEAD
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;
const operation_1 = require("./operation");
const command_1 = require("./command");
/** @internal */
class DropCollectionOperation extends command_1.CommandOperation {
    constructor(db, name, options) {
        super(db, options);
        this.options = options;
        this.name = name;
    }
    execute(server, session, callback) {
        super.executeCommand(server, session, { drop: this.name }, (err, result) => {
            if (err)
                return callback(err);
            if (result.ok)
                return callback(undefined, true);
            callback(undefined, false);
        });
    }
}
exports.DropCollectionOperation = DropCollectionOperation;
/** @internal */
class DropDatabaseOperation extends command_1.CommandOperation {
    constructor(db, options) {
        super(db, options);
        this.options = options;
    }
    execute(server, session, callback) {
        super.executeCommand(server, session, { dropDatabase: 1 }, (err, result) => {
            if (err)
                return callback(err);
            if (result.ok)
                return callback(undefined, true);
            callback(undefined, false);
        });
    }
}
exports.DropDatabaseOperation = DropDatabaseOperation;
operation_1.defineAspects(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);
operation_1.defineAspects(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);
//# sourceMappingURL=drop.js.map
=======
'use strict';

const Aspect = require('./operation').Aspect;
const CommandOperation = require('./command');
const defineAspects = require('./operation').defineAspects;
const handleCallback = require('../utils').handleCallback;

class DropOperation extends CommandOperation {
  constructor(db, options) {
    const finalOptions = Object.assign({}, options, db.s.options);

    if (options.session) {
      finalOptions.session = options.session;
    }

    super(db, finalOptions);
  }

  execute(callback) {
    super.execute((err, result) => {
      if (err) return handleCallback(callback, err);
      if (result.ok) return handleCallback(callback, null, true);
      handleCallback(callback, null, false);
    });
  }
}

defineAspects(DropOperation, Aspect.WRITE_OPERATION);

class DropCollectionOperation extends DropOperation {
  constructor(db, name, options) {
    super(db, options);

    this.name = name;
    this.namespace = `${db.namespace}.${name}`;
  }

  _buildCommand() {
    return { drop: this.name };
  }
}

class DropDatabaseOperation extends DropOperation {
  _buildCommand() {
    return { dropDatabase: 1 };
  }
}

module.exports = {
  DropOperation,
  DropCollectionOperation,
  DropDatabaseOperation
};
>>>>>>> 28bef2bd78a4fd37d2547269b773f6690c3e9398
